DP1

暴力递归（暴力递归就是尝试）
1.把问题转化为规模缩小了的同类问题的子问题
2.有明确的不需要继续进行递归的条件（base case）
3.有当得到了子问题结果之后的决策过程
4.不记录每一个子问题的解（这是区别暴力递归和动态规划的关键）

递归过程就是你想怎么试，你就能怎么写。但你必须保证，你的子问题和你描述的事是一个事。
一个大问题拆分成同样的但是数据量更小的小问题。

设计暴力递归的原则
1）每一个可变参数，一定不要比 int 类型更复杂
2）原则一可以违反，让类型突破到一维线性结构，那必须是唯一可变参数
3）如果发现原则一被违反，但不违反原则2，只需要做到记忆化搜索即可
4）可变参数的个数，能少则少。

如何找到某个问题的动态规划方式
1.设计暴力递归：重要原则+4种常见模型！！！！
2.分析有无重复解：套路解决
3.记忆化搜索 -> 用严格表结构实现动态规划：套路解决
4.看看能否继续优化：套路解决

什么暴力递归可以继续优化？
1.有重复调用同一个子问题的解，这种递归可以优化
2.如果每一个子问题都是不同的解，无法优化也不用优化

暴力递归到动态规划的套路
1.你已经有了一个不违反原则的暴力递归，而且的确存在解的重复调用
2.找到哪些参数的变化会影响返回值，对每一个列出变化范围
3.参数间的所有的组合数量，意味着表的大小
4.记忆化搜索的方法就是傻缓存，非常容易得到
5.规定好严格表的大小，分析位置的依赖顺序，然后从基础填写到最终解
6.对于有枚举行为的决策过程，进一步优化

题目和动态规划的关系
1.解决一个问题，可能有多种尝试方法
2.可能在很多尝试方法中，又有若干个尝试方法有动态规划的方式
3.一个问题，可能有若干种动态规划的解法

